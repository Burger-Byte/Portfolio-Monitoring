
name: Deploy Monitoring Stack

on:
  push:
    branches: [ main ]
  workflow_dispatch:  

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/monitoring:latest
          ${{ secrets.DOCKER_USERNAME }}/monitoring:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create monitoring directory
      run: |
        sudo mkdir -p /opt/monitoring
        sudo chown $USER:$USER /opt/monitoring
    
    - name: Copy monitoring configuration files
      run: |
        cp docker-compose.yaml /opt/monitoring/
        cp prometheus.yaml /opt/monitoring/
        cp alert_rules.yaml /opt/monitoring/
        cp alertmanager.yaml /opt/monitoring/
        echo "‚úÖ Copied monitoring configuration files"
        ls -la /opt/monitoring/

    - name: Create environment file with secrets
      run: |
        cd /opt/monitoring
        echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" > .env
        echo "ALERTMANAGER_EMAIL=${{ secrets.ALERTMANAGER_EMAIL }}" >> .env
        echo "ALERTMANAGER_PASSWORD=${{ secrets.ALERTMANAGER_PASSWORD }}" >> .env
        echo "‚úÖ Environment file created"
        echo "Environment variables set: $(grep -c '=' .env)"
    
    - name: Pull latest Docker image
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/monitoring:latest

    - name: Deploy monitoring stack with Docker Compose
      run: |
        cd /opt/monitoring
        
        # Stop existing monitoring containers
        docker-compose down || true
        
        # Start monitoring stack
        docker-compose up -d
        
        # Clean up old images
        docker image prune -f
    
    - name: Health check monitoring services
      run: |
        sleep 30
        
        # Check Prometheus
        if curl -f http://localhost:9090/-/healthy; then
          echo "‚úÖ Prometheus healthy"
        else
          echo "‚ùå Prometheus not healthy"
          exit 1
        fi
        
        # Check Grafana
        if curl -f http://localhost:3000/api/health; then
          echo "‚úÖ Grafana healthy"
        else
          echo "‚ùå Grafana not healthy"
          exit 1
        fi
        
        # Check if portfolio app is being scraped
        if curl -s http://localhost:9090/api/v1/targets | grep -q "portfolio-app"; then
          echo "‚úÖ Portfolio app target configured"
        else
          echo "‚ö†Ô∏è  Portfolio app target not found"
        fi
        
        echo "üéâ Monitoring stack deployed successfully!"
        echo "üìä Grafana: http://$(hostname -I | awk '{print $1}'):3000"
        echo "üìà Prometheus: http://$(hostname -I | awk '{print $1}'):9090"